# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: package-rpm

"on":
  push:
    paths:
      - .github/actions/**
      - .github/workflows/package-rpm.yml
      - debian/**
      - rpm/**
  pull_request:
    paths:
      - .github/actions/**
      - .github/workflows/package-rpm.yml
      - debian/**
      - rpm/**
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      release:
        description: 'Debian package release number'
        default: '1'

permissions: write-all

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  RUST_BACKTRACE: 1

  PROTOC_VERSION: "23.4"

jobs:
  build-rpm:
    name: "${{ matrix.distro }}:${{ matrix.version }} (${{ matrix.arch }})"
    runs-on: buildjet-16vcpu-ubuntu-2204${{ matrix.arch == 'arm64' && '-arm' || '' }}
    container: "${{ matrix.distro }}:${{ matrix.version }}"
    strategy:
      matrix:
        # minimum kernel version is 5.5
        include:
          - { distro: rockylinux, version: 9, arch: x86_64 }
          - { distro: rockylinux, version: 9, arch: arm64 }
          - { distro: amazonlinux, version: 2023, arch: x86_64 }
          - { distro: amazonlinux, version: 2023, arch: arm64 }
      fail-fast: false
    steps:
      - name: install basic dependencies
        if: matrix.distro == 'amazonlinux'
        shell: bash
        run: |
          yum install -y tar gzip

      - uses: actions/checkout@v4

      - name: install rust
        run: |
          curl -sSf https://sh.rustup.rs | sh /dev/stdin -y
          echo "PATH=$HOME/.cargo/bin:$PATH" >> "$GITHUB_ENV"

      - name: install build dependencies
        shell: bash
        run: |
          yum install -y gcc elfutils-devel clang openssl-devel

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: build-rpm-${{ matrix.distro }}-${{ matrix.version}}-${{ matrix.arch }}

      - name: install rpm packaging tool
        run: cargo install cargo-generate-rpm

      - name: check cargo
        shell: bash
        run: |
          echo "::group::rustc -vV"
          rustc -vV
          echo "::endgroup::"
          echo "::group::cargo -vV"
          cargo -vV
          echo "::endgroup::"

      - name: set release env var
        if: ${{ github.event_name == 'workflow_dispatch' }}
        shell: bash
        run: |
          echo 'RELEASE=${{ github.event.inputs.release }}' >> $GITHUB_ENV

      - name: build
        shell: bash
        run: |
          cargo build --release --locked

      - name: package
        shell: bash
        run: |
          # Build with cargo-generate-rpm
          cargo generate-rpm --payload-compress gzip

          # Install rpm-build for rebuilding with proper headers
          yum install -y rpm-build

          # Fix each RPM using rpmbuild to add ARCHIVESIZE
          for rpm in target/generate-rpm/*.rpm; do
            echo "Fixing $(basename $rpm) for GCP Artifact Registry..."

            # Extract metadata from the existing RPM
            FULL_VERSION=$(rpm -qp --qf "%{VERSION}" "$rpm")
            RPM_ARCH=$(rpm -qp --qf "%{ARCH}" "$rpm")

            # Parse version and determine release format
            if [[ "$FULL_VERSION" == *"-alpha"* ]]; then
              RPM_VERSION=$(echo "$FULL_VERSION" | cut -d'-' -f1)
              ALPHA_VERSION=$(echo "$FULL_VERSION" | sed 's/.*-alpha\.//')
              # Use 0.X.alpha.Y format for pre-releases
              RPM_RELEASE="0.1.alpha.${ALPHA_VERSION}"
            elif [[ "$FULL_VERSION" == *"-beta"* ]]; then
              RPM_VERSION=$(echo "$FULL_VERSION" | cut -d'-' -f1)
              BETA_VERSION=$(echo "$FULL_VERSION" | sed 's/.*-beta\.//')
              RPM_RELEASE="0.2.beta.${BETA_VERSION}"
            elif [[ "$FULL_VERSION" == *"-rc"* ]]; then
              RPM_VERSION=$(echo "$FULL_VERSION" | cut -d'-' -f1)
              RC_VERSION=$(echo "$FULL_VERSION" | sed 's/.*-rc\.//')
              RPM_RELEASE="0.3.rc.${RC_VERSION}"
            else
              # Stable release
              RPM_VERSION="$FULL_VERSION"
              RPM_RELEASE="1"
            fi

            echo "  Version: $RPM_VERSION"
            echo "  Release: $RPM_RELEASE"

            # Setup rpmbuild directory
            mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}

            # Create spec from template
            sed -e "s/@NAME@/rezolus/g" \
                -e "s/@VERSION@/${RPM_VERSION}/g" \
                -e "s/@RELEASE@/${RPM_RELEASE}/g" \
                -e "s/@ARCH@/${RPM_ARCH}/g" \
                rpm/rezolus.spec.template > ~/rpmbuild/SPECS/rezolus.spec

            # Rebuild the RPM with proper headers
            rpmbuild -bb \
              --define "_topdir $HOME/rpmbuild" \
              --define "_sourcedir $GITHUB_WORKSPACE" \
              --define "_binary_payload w9.gzdio" \
              ~/rpmbuild/SPECS/rezolus.spec

            # Replace the original RPM with the fixed one
            mv ~/rpmbuild/RPMS/*/*.rpm "$rpm"

            # Cleanup for next iteration
            rm -rf ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}

            echo "  Created: $(basename ~/rpmbuild/RPMS/*/*.rpm)"
          done

          # Final verification
          echo ""
          echo "Verifying ARCHIVESIZE headers:"
          for rpm in target/generate-rpm/*.rpm; do
            echo "$(basename $rpm):"
            rpm -qp --qf "  VERSION: %{VERSION}\n  RELEASE: %{RELEASE}\n  ARCHIVESIZE: %{ARCHIVESIZE}\n" "$rpm"
          done

      - uses: actions/upload-artifact@v4
        with:
          path: target/generate-rpm/*
          name: ${{ matrix.distro }}_${{ matrix.version }}_${{ matrix.arch }}

  upload-to-artifact-registry:
    if: ${{ github.event_name == 'release' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    needs:
      - build-rpm
    steps:
      - uses: actions/checkout@v4
      - name: check release type
        id: check-release
        run: |
          TAG="${{ github.event.release.tag_name || 'manual' }}"

          # Check if this is a stable release (no + or -)
          if [[ "$TAG" == *"+"* ]] || [[ "$TAG" == *"-"* ]]; then
            echo "is_stable=false" >> $GITHUB_OUTPUT
            echo "Non-stable release detected: $TAG"
          else
            echo "is_stable=true" >> $GITHUB_OUTPUT
            echo "Stable release detected: $TAG"
          fi

      - uses: actions/download-artifact@v4.1.7
        with:
          path: target/rpm/

      # # Upload to systemslab registry (systemslab project)
      # - uses: google-github-actions/auth@v1
      #   id: auth-systemslab
      #   with:
      #     credentials_json: "${{ secrets.GCP_CREDENTIALS }}"

      # - uses: google-github-actions/setup-gcloud@v1

      # - name: upload to systemslab registry (all releases)
      #   run: |
      #     gcloud config set artifacts/repository systemslab
      #     gcloud config set artifacts/location us

      #     for artifact in target/rpm/*/*; do
      #       name="$(basename "$artifact")"

      #       echo "::group::upload to systemslab $name"
      #       gcloud artifacts yum upload generic-repo --source "$artifact"
      #       echo "::endgroup::"
      #     done

      # Upload to rezolus registry (rezolus project) - stable releases only
      - uses: google-github-actions/auth@v1
        if: steps.check-release.outputs.is_stable == 'true'
        id: auth-rezolus
        with:
          credentials_json: "${{ secrets.GCP_CREDENTIALS_REZOLUS }}"

      - uses: google-github-actions/setup-gcloud@v1
        if: steps.check-release.outputs.is_stable == 'true'

      - name: upload to rezolus registry (stable releases only)
        if: steps.check-release.outputs.is_stable == 'true'
        run: |
          gcloud config set artifacts/location us

          for artifact in target/rpm/*/*; do
            name="$(basename "$artifact")"
            directory="$(basename "$(dirname "$artifact")")"
            distro="$(echo "$directory" | cut -d _ -f 1)"
            version="$(echo "$directory" | cut -d _ -f 2)"

            # Map distro names to repository names
            case "$distro" in
              rockylinux)
                repo_name="rocky${version}"
                ;;
              amazonlinux)
                repo_name="al${version}"
                ;;
              *)
                repo_name="${distro}${version}"
                ;;
            esac

            echo "::group::upload to $repo_name repository: $name"
            gcloud artifacts yum upload "$repo_name" \
              --source="$artifact" \
              --quiet
            echo "::endgroup::"
          done

  upload-release-artifacts:
    if: ${{ github.event_name == 'release' }}
    runs-on: ubuntu-latest
    needs:
      - build-rpm
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4.1.7
        with:
          path: target/rpm/

      - name: upload packages
        shell: bash
        run: |
          set -x
          shopt -s nullglob

          mkdir -p target/artifacts

          for artifact in target/rpm/**/*; do
            name="$(basename "$artifact")"
            directory="$(basename "$(dirname "$artifact")")"
            distro="$(echo "$directory" | cut -d _ -f 1)"
            version="$(echo "$directory" | cut -d _ -f 2)"

            mv "$artifact" "target/artifacts/${distro}_${version}_${name}"
          done

          gh release upload "${{ github.event.release.tag_name }}" target/artifacts/*
