[general]
listen = "0.0.0.0:4242"

[log]
# Controls the log level: "error", "warn", "info", "debug", "trace"
level = "info"

[prometheus]
# Controls whether the full distribution for each histogram is exposed via the
# prometheus endpoint (`/metrics`). This adds a considerable number of time
# series depending on the downsampling factor as each histogram bucket is
# represented as its own time series.
histograms = false

# The histogram can be downsampled for exposition to reduce the number of
# buckets, and therefore reduce the number of timeseries needed to store the
# distribution.
#
# The grouping power must be in the range 0..=3. The native histograms are
# recorded with a grouping power of 3. Any reduction in the grouping power will
# increase the relative error, as the buckets are wider with lower grouping
# powers.
#
# See https://docs.rs/histogram/ for more information about the grouping power.
#
# Power:   	    Error:		Buckets:
# 3              12.5%      496
# 2              25.0%      252
# 1              50.0%      128
# 0             100.0%       65
histogram_grouping_power = 3

# The defaults are used for each sampler unless there's a sampler level
# configuration present.

[defaults]
# Controls whether the samplers are enabled or not. Setting the default to
# true means that individual sampler configs can be used to opt-out of
# collection for that sampler. Setting the default to false requires that
# individual sampler configs are used to opt-in to collection.
enabled = true

# Each sampler can then be individually configured to override the defaults. All
# of the configuration options in the `[defaults]` section are allowed.

# BPF sampler that instruments block_io request queue to measure the request
# latency distribution.
[samplers.block_io_latency]

# BPF sampler that instruments block_io request queue to get counts of requests,
# the number of bytes by request type, and the size distribution.
[samplers.block_io_requests]

# Instruments CPU frequency, instructions, and cycles using perf counters.
[samplers.cpu_perf]

# Instruments CPU usage by state with BPF on linux. On macos
# host_processor_info() is used
[samplers.cpu_usage]

# Instruments the number of currently open file descriptors using
# /proc/sys/fs/file-nr
[samplers.filesystem_descriptors]

# Produces various nVIDIA specific GPU metrics using NVML
[samplers.gpu_nvidia]

# Memory utilization from /proc/meminfo
[samplers.memory_meminfo]

# Memory NUMA metrics from /proc/vmstat
[samplers.memory_vmstat]

# Produces network interface statistics from /sys/class/net for TX/RX errors
[samplers.network_interfaces]

# Produces network traffic statistics using BPF
[samplers.network_traffic]

# Sample resource utilization for Rezolus itself
[samplers.rezolus_rusage]

# BPF sampler that instruments scheduler events and measures runqueue latency,
# process running time, and context switch information.
[samplers.scheduler_runqueue]

# BPF sampler that instruments syscall enter to gather syscall counts.
[samplers.syscall_counts]

# BPF sampler that instruments syscall enter and exit to gather syscall latency
# distributions.
[samplers.syscall_latency]

# Instruments TCP connection states by reading /proc/net/tcp
[samplers.tcp_connection_state]

# BPF sampler that probes TCP receive path to measure latency from a packet
# being received until application reads from the socket.
[samplers.tcp_packet_latency]

# BPF sampler that probes TCP receive path to measure jitter and smoothed round
# trip time.
[samplers.tcp_receive]

# BPF sampler that probes TCP retransmit path to measure retransmits.
[samplers.tcp_retransmit]

# Samples TCP traffic using a BPF sampler to get metrics for TX/RX bytes and
# packets
[samplers.tcp_traffic]
